
---
#
# Copyright Fujitsu Australia Software Technology, IBM Corp. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#
#
# The network connection profile provides client applications the information about the target
# blockchain network that are necessary for the applications to interact with it. These are all
# knowledge that must be acquired from out-of-band sources. This file provides such a source.
#
name: "Melon Network-Config"

#
# Any properties with an "x-" prefix will be treated as application-specific, exactly like how naming
# in HTTP headers or swagger properties work. The SDK will simply ignore these fields and leave
# them for the applications to process. This is a mechanism for different components of an application
# to exchange information that are not part of the standard schema described below. In particular,
# the "x-type" property with the "hlfv1" value example below is used by Hyperledger Composer to
# determine the type of Fabric networks (v0.6 vs. v1.0) it needs to work with.
#
x-type: "hlfv1"

#
# Describe what the target network is/does.
#
description: "The network used in the integration tests"

#
# Schema version of the content. Used by the SDK to apply the corresponding parsing rules.
#
version: 1.0.0

#
# The client section is SDK-specific. The sample below is for the node.js SDK
#
client:
  # Which organization does this application instance belong to? The value must be the name of an org
  # defined under "organizations"
  organization: Org1

#
# [Optional]. But most apps would have this section so that channel objects can be constructed
# based on the content below. If an app is creating channels, then it likely will not need this
# section.
#
channels:
  # name of the channel
  melonchannel:
    # Required. list of orderers designated by the application to use for transactions on this
    # channel. This list can be a result of access control ("org1" can only access "ordererA"), or
    # operational decisions to share loads from applications among the orderers.  The values must
    # be "names" of orgs defined under "organizations/peers"
    orderers:
      - orderer.example.com

    # Required. list of peers from participating orgs
    peers:
      peer0.org1.example.com:
        # [Optional]. will this peer be sent transaction proposals for endorsement? The peer must
        # have the chaincode installed. The app can also use this property to decide which peers
        # to send the chaincode install request. Default: true
        endorsingPeer: true

        # [Optional]. will this peer be sent query proposals? The peer must have the chaincode
        # installed. The app can also use this property to decide which peers to send the
        # chaincode install request. Default: true
        chaincodeQuery: true

        # [Optional]. will this peer be sent query proposals that do not require chaincodes, like
        # queryBlock(), queryTransaction(), etc. Default: true
        ledgerQuery: true

        # [Optional]. will this peer be the target of the SDK's listener registration? All peers can
        # produce events but the app typically only needs to connect to one to listen to events.
        # Default: true
        eventSource: true

      peer0.org2.example.com:
        endorsingPeer: true
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: true

    # [Optional]. what chaincodes are expected to exist on this channel? The application can use
    # this information to validate that the target peers are in the expected state by comparing
    # this list with the query results of getInstalledChaincodes() and getInstantiatedChaincodes()
    chaincodes:
      # the format follows the "cannonical name" of chaincodes by fabric code
      - meloncc:v0

#
# list of participating organizations in this network
#
organizations:
  Org1:
    mspid: Org1MSP

    peers:
      - peer0.org1.example.com
    critificateAutorities:
      - ca-org1
  Org2:
    mspid: Org2MSP

    peers:
      - peer0.org2.example.com
    critificateAutorities:
      - ca-org2


#
# List of orderers to send transaction and channel create/update requests to. For the time
# being only one orderer is needed. If more than one is defined, which one get used by the
# SDK is implementation specific. Consult each SDK's documentation for its handling of orderers.
#
orderers:
  orderer.example.com:
    url: grpc://localhost:7050

    # these are standard properties defined by the gRPC library
    # they will be passed in as-is to gRPC client constructor
    grpcOptions:
      #      ssl-target-name-override: orderer.example.com
      #      sslProvider: openSSL
      #      negotiationType: TLS
      #      hostnameOverride: orderer.example.com
      grpc-max-send-message-length: 15
      grpc.keepalive_time_ms: 360000
      grpc.keepalive_timeout_ms: 180000

    # src/test/fixture/sdkintegration/e2e-2Orgs/v1.3/crypto-config/ordererOrganizations/example.com/tlsca
#    tlsCACerts:
#      pem: |
#        -----BEGIN CERTIFICATE-----
#        MIICNjCCAdygAwIBAgIRALBAjQY2Wfpwz6/bqKvkeAowCgYIKoZIzj0EAwIwbDEL
#        MAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBG
#        cmFuY2lzY28xFDASBgNVBAoTC2V4YW1wbGUuY29tMRowGAYDVQQDExF0bHNjYS5l
#        eGFtcGxlLmNvbTAeFw0xODAyMjUxMjQzMjlaFw0yODAyMjMxMjQzMjlaMGwxCzAJ
#        BgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1TYW4gRnJh
#        bmNpc2NvMRQwEgYDVQQKEwtleGFtcGxlLmNvbTEaMBgGA1UEAxMRdGxzY2EuZXhh
#        bXBsZS5jb20wWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAAR/LJmaZdt0jZMgTfsQ
#        vLkJTCDG4m8lNdtQI5VoCpKKSxMlFKUPU54ofttW2Vn76hm7/eK+Lq09LRgJheo1
#        6y47o18wXTAOBgNVHQ8BAf8EBAMCAaYwDwYDVR0lBAgwBgYEVR0lADAPBgNVHRMB
#        Af8EBTADAQH/MCkGA1UdDgQiBCDadvMVYJ3hG7FgDW7vlVW20s0L8mVUn/ggI2l0
#        1ntSRTAKBggqhkjOPQQDAgNIADBFAiEAvX5+F+QnNPKX/Q/kFmkzOdRovEtgIylG
#        EArBHBpaqpkCIDNzXoW//ROIslbKToWexg/kwAH1HMhkm9doTyaDxc4k
#        -----END CERTIFICATE-----

#
# List of peers to send various requests to, including endorsement, query
# and event listener registration.
#
peers:
  peer0.org1.example.com:
    # this URL is used to send endorsement and query requests
    url: grpc://localhost:7051


    grpcOptions:
      grpc.http2.keepalive_time: 15
  #      ssl-target-name-override: peer0.org1.example.com
  #      negotiationType: TLS
  #      sslProvider: openSSL
  #      hostnameOverride: peer0.org1.example.com
  #      # TODO: The following causes a NoSuchMethodException to be thrown when sending proposals to the peer...
  #      # grpc.NettyChannelBuilderOption.maxInboundMessageSize: 9000000
  #
  #    tlsCACerts:
  #      pem: |
  #          -----BEGIN CERTIFICATE-----
  #          MIICZjCCAg2gAwIBAgIQT5LDpIbEhZ93KRfuBzhsPDAKBggqhkjOPQQDAjB2MQsw
  #          CQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy
  #          YW5jaXNjbzEZMBcGA1UEChMQb3JnMS5leGFtcGxlLmNvbTEfMB0GA1UEAxMWdGxz
  #          Y2Eub3JnMS5leGFtcGxlLmNvbTAeFw0xODAyMjUxMjQzMjlaFw0yODAyMjMxMjQz
  #          MjlaMFsxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQH
  #          Ew1TYW4gRnJhbmNpc2NvMR8wHQYDVQQDExZwZWVyMC5vcmcxLmV4YW1wbGUuY29t
  #          MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE+br01bZtM+KZswLnXiZK0f3bfSqt
  #          8+NnJc71NGx+VsUeU38jNl282Uo7A0PNKMQpr10BXomDl3jsTMK8E0aT16OBlzCB
  #          lDAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMC
  #          MAwGA1UdEwEB/wQCMAAwKwYDVR0jBCQwIoAgEkNmPHedLauZvdBejAlBvo4xhOWp
  #          2+VxGreyMCZtcicwKAYDVR0RBCEwH4IWcGVlcjAub3JnMS5leGFtcGxlLmNvbYIF
  #          cGVlcjAwCgYIKoZIzj0EAwIDRwAwRAIgdwC/WQ6wRHlTygTJJ8SiAoMrbDpTePhx
  #          Z2GEIu5RtMwCIBuJ8LTJnFZNivBbTFU/65lhCLpVj5R3j5KuaJ+dovF5
  #          -----END CERTIFICATE-----

  peer0.org2.example.com:
    url: grpc://localhost:8051

    grpcOptions:
      grpc.http2.keepalive_time: 15


certificateAuthorities:
  ca-org1:
    url: http://localhost:7054
    # the properties specified under this object are passed to the 'http' client verbatim when
    # making the request to the Fabric-CA server
    #    httpOptions:
    #      verify: true

    # Fabric-CA supports dynamic user enrollment via REST APIs. A "root" user, a.k.a registrar, is
    # needed to enroll and invoke new users.
    registrar: #single entitiy
      enrollId: admin
      enrollSecret: adminpw
    # [Optional] The optional name of the CA.
    caName: ca1
  
  ca-org2:
    url: http://localhost:8054
    registrar: 
      enrolled: admin
      enrollSecret: adminpw
    caName: ca2
